{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "linkAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "seed",
          "type": "uint256"
        }
      ],
      "name": "RandomnessRequest",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "LINK",
      "outputs": [
        {
          "internalType": "contract LinkTokenInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "randomness",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "consumerContract",
          "type": "address"
        }
      ],
      "name": "callBackWithRandomness",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "onTokenTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "2": "C:/Users/Usu\u00e1rio/.brownie/packages/smartcontractkit/chainlink-brownie-contracts@0.2.2/contracts/src/v0.8/VRFConsumerBase.sol",
    "3": "C:/Users/Usu\u00e1rio/.brownie/packages/smartcontractkit/chainlink-brownie-contracts@0.2.2/contracts/src/v0.8/VRFRequestIDBase.sol",
    "5": "C:/Users/Usu\u00e1rio/.brownie/packages/smartcontractkit/chainlink-brownie-contracts@0.2.2/contracts/src/v0.8/interfaces/LinkTokenInterface.sol",
    "7": "contracts/test/VRFCoordinatorMock.sol"
  },
  "ast": {
    "absolutePath": "contracts/test/VRFCoordinatorMock.sol",
    "exportedSymbols": {
      "LinkTokenInterface": [
        1011
      ],
      "VRFConsumerBase": [
        870
      ],
      "VRFCoordinatorMock": [
        639
      ],
      "VRFRequestIDBase": [
        1084
      ]
    },
    "id": 640,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 522,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:23:7"
      },
      {
        "absolutePath": "C:/Users/Usu\u00e1rio/.brownie/packages/smartcontractkit/chainlink-brownie-contracts@0.2.2/contracts/src/v0.8/interfaces/LinkTokenInterface.sol",
        "file": "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol",
        "id": 523,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 640,
        "sourceUnit": 1012,
        "src": "57:73:7",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "C:/Users/Usu\u00e1rio/.brownie/packages/smartcontractkit/chainlink-brownie-contracts@0.2.2/contracts/src/v0.8/VRFConsumerBase.sol",
        "file": "@chainlink/contracts/src/v0.8/VRFConsumerBase.sol",
        "id": 524,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 640,
        "sourceUnit": 871,
        "src": "131:59:7",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "VRFCoordinatorMock",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 639,
        "linearizedBaseContracts": [
          639
        ],
        "name": "VRFCoordinatorMock",
        "nameLocation": "201:18:7",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "functionSelector": "1b6b6d23",
            "id": 527,
            "mutability": "mutable",
            "name": "LINK",
            "nameLocation": "250:4:7",
            "nodeType": "VariableDeclaration",
            "scope": 639,
            "src": "224:30:7",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_LinkTokenInterface_$1011",
              "typeString": "contract LinkTokenInterface"
            },
            "typeName": {
              "id": 526,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 525,
                "name": "LinkTokenInterface",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 1011,
                "src": "224:18:7"
              },
              "referencedDeclaration": 1011,
              "src": "224:18:7",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_LinkTokenInterface_$1011",
                "typeString": "contract LinkTokenInterface"
              }
            },
            "visibility": "public"
          },
          {
            "anonymous": false,
            "id": 535,
            "name": "RandomnessRequest",
            "nameLocation": "265:17:7",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 534,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 529,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "sender",
                  "nameLocation": "299:6:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 535,
                  "src": "283:22:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 528,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "283:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 531,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "keyHash",
                  "nameLocation": "323:7:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 535,
                  "src": "307:23:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 530,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "307:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 533,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "seed",
                  "nameLocation": "348:4:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 535,
                  "src": "332:20:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 532,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "332:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "282:71:7"
            },
            "src": "259:95:7"
          },
          {
            "body": {
              "id": 546,
              "nodeType": "Block",
              "src": "398:49:7",
              "statements": [
                {
                  "expression": {
                    "id": 544,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 540,
                      "name": "LINK",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 527,
                      "src": "404:4:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_LinkTokenInterface_$1011",
                        "typeString": "contract LinkTokenInterface"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 542,
                          "name": "linkAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 537,
                          "src": "430:11:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 541,
                        "name": "LinkTokenInterface",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1011,
                        "src": "411:18:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_LinkTokenInterface_$1011_$",
                          "typeString": "type(contract LinkTokenInterface)"
                        }
                      },
                      "id": 543,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "411:31:7",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_LinkTokenInterface_$1011",
                        "typeString": "contract LinkTokenInterface"
                      }
                    },
                    "src": "404:38:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_LinkTokenInterface_$1011",
                      "typeString": "contract LinkTokenInterface"
                    }
                  },
                  "id": 545,
                  "nodeType": "ExpressionStatement",
                  "src": "404:38:7"
                }
              ]
            },
            "id": 547,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 538,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 537,
                  "mutability": "mutable",
                  "name": "linkAddress",
                  "nameLocation": "378:11:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 547,
                  "src": "370:19:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 536,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "370:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "369:21:7"
            },
            "returnParameters": {
              "id": 539,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "398:0:7"
            },
            "scope": 639,
            "src": "358:89:7",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 578,
              "nodeType": "Block",
              "src": "557:133:7",
              "statements": [
                {
                  "assignments": [
                    559,
                    561
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 559,
                      "mutability": "mutable",
                      "name": "keyHash",
                      "nameLocation": "572:7:7",
                      "nodeType": "VariableDeclaration",
                      "scope": 578,
                      "src": "564:15:7",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 558,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "564:7:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 561,
                      "mutability": "mutable",
                      "name": "seed",
                      "nameLocation": "589:4:7",
                      "nodeType": "VariableDeclaration",
                      "scope": 578,
                      "src": "581:12:7",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 560,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "581:7:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 571,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 564,
                        "name": "_data",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 553,
                        "src": "608:5:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      {
                        "components": [
                          {
                            "id": 566,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "616:7:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_bytes32_$",
                              "typeString": "type(bytes32)"
                            },
                            "typeName": {
                              "id": 565,
                              "name": "bytes32",
                              "nodeType": "ElementaryTypeName",
                              "src": "616:7:7",
                              "typeDescriptions": {}
                            }
                          },
                          {
                            "id": 568,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "625:7:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_uint256_$",
                              "typeString": "type(uint256)"
                            },
                            "typeName": {
                              "id": 567,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "625:7:7",
                              "typeDescriptions": {}
                            }
                          }
                        ],
                        "id": 569,
                        "isConstant": false,
                        "isInlineArray": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "TupleExpression",
                        "src": "615:18:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$_t_type$_t_bytes32_$_$_t_type$_t_uint256_$_$",
                          "typeString": "tuple(type(bytes32),type(uint256))"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        },
                        {
                          "typeIdentifier": "t_tuple$_t_type$_t_bytes32_$_$_t_type$_t_uint256_$_$",
                          "typeString": "tuple(type(bytes32),type(uint256))"
                        }
                      ],
                      "expression": {
                        "id": 562,
                        "name": "abi",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -1,
                        "src": "597:3:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_abi",
                          "typeString": "abi"
                        }
                      },
                      "id": 563,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberName": "decode",
                      "nodeType": "MemberAccess",
                      "src": "597:10:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
                        "typeString": "function () pure"
                      }
                    },
                    "id": 570,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "597:37:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bytes32_$_t_uint256_$",
                      "typeString": "tuple(bytes32,uint256)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "563:71:7"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 573,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 549,
                        "src": "663:6:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 574,
                        "name": "keyHash",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 559,
                        "src": "671:7:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 575,
                        "name": "seed",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 561,
                        "src": "680:4:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 572,
                      "name": "RandomnessRequest",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 535,
                      "src": "645:17:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_bytes32_$_t_uint256_$returns$__$",
                        "typeString": "function (address,bytes32,uint256)"
                      }
                    },
                    "id": 576,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "645:40:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 577,
                  "nodeType": "EmitStatement",
                  "src": "640:45:7"
                }
              ]
            },
            "functionSelector": "a4c0ed36",
            "id": 579,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 556,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 555,
                  "name": "onlyLINK",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 638,
                  "src": "548:8:7"
                },
                "nodeType": "ModifierInvocation",
                "src": "548:8:7"
              }
            ],
            "name": "onTokenTransfer",
            "nameLocation": "460:15:7",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 554,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 549,
                  "mutability": "mutable",
                  "name": "sender",
                  "nameLocation": "489:6:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 579,
                  "src": "481:14:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 548,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "481:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 551,
                  "mutability": "mutable",
                  "name": "fee",
                  "nameLocation": "509:3:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 579,
                  "src": "501:11:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 550,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "501:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 553,
                  "mutability": "mutable",
                  "name": "_data",
                  "nameLocation": "531:5:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 579,
                  "src": "518:18:7",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 552,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "518:5:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "475:65:7"
            },
            "returnParameters": {
              "id": 557,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "557:0:7"
            },
            "scope": 639,
            "src": "451:239:7",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 622,
              "nodeType": "Block",
              "src": "814:268:7",
              "statements": [
                {
                  "assignments": [
                    590
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 590,
                      "mutability": "mutable",
                      "name": "v",
                      "nameLocation": "836:1:7",
                      "nodeType": "VariableDeclaration",
                      "scope": 622,
                      "src": "820:17:7",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_VRFConsumerBase_$870",
                        "typeString": "contract VRFConsumerBase"
                      },
                      "typeName": {
                        "id": 589,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 588,
                          "name": "VRFConsumerBase",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 870,
                          "src": "820:15:7"
                        },
                        "referencedDeclaration": 870,
                        "src": "820:15:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_VRFConsumerBase_$870",
                          "typeString": "contract VRFConsumerBase"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 591,
                  "nodeType": "VariableDeclarationStatement",
                  "src": "820:17:7"
                },
                {
                  "assignments": [
                    593
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 593,
                      "mutability": "mutable",
                      "name": "resp",
                      "nameLocation": "856:4:7",
                      "nodeType": "VariableDeclaration",
                      "scope": 622,
                      "src": "843:17:7",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 592,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "843:5:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 602,
                  "initialValue": {
                    "arguments": [
                      {
                        "expression": {
                          "expression": {
                            "id": 596,
                            "name": "v",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 590,
                            "src": "886:1:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_VRFConsumerBase_$870",
                              "typeString": "contract VRFConsumerBase"
                            }
                          },
                          "id": 597,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "rawFulfillRandomness",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 869,
                          "src": "886:22:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_bytes32_$_t_uint256_$returns$__$",
                            "typeString": "function (bytes32,uint256) external"
                          }
                        },
                        "id": 598,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "selector",
                        "nodeType": "MemberAccess",
                        "src": "886:31:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      },
                      {
                        "id": 599,
                        "name": "requestId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 581,
                        "src": "919:9:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      {
                        "id": 600,
                        "name": "randomness",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 583,
                        "src": "930:10:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        },
                        {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "id": 594,
                        "name": "abi",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -1,
                        "src": "863:3:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_abi",
                          "typeString": "abi"
                        }
                      },
                      "id": 595,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberName": "encodeWithSelector",
                      "nodeType": "MemberAccess",
                      "src": "863:22:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
                        "typeString": "function (bytes4) pure returns (bytes memory)"
                      }
                    },
                    "id": 601,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "863:78:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_memory_ptr",
                      "typeString": "bytes memory"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "843:98:7"
                },
                {
                  "assignments": [
                    604
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 604,
                      "mutability": "mutable",
                      "name": "b",
                      "nameLocation": "955:1:7",
                      "nodeType": "VariableDeclaration",
                      "scope": 622,
                      "src": "947:9:7",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 603,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "947:7:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 606,
                  "initialValue": {
                    "hexValue": "323036303030",
                    "id": 605,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "959:6:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_206000_by_1",
                      "typeString": "int_const 206000"
                    },
                    "value": "206000"
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "947:18:7"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 611,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 608,
                            "name": "gasleft",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -7,
                            "src": "979:7:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_gasleft_view$__$returns$_t_uint256_$",
                              "typeString": "function () view returns (uint256)"
                            }
                          },
                          "id": 609,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "979:9:7",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "id": 610,
                          "name": "b",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 604,
                          "src": "992:1:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "979:14:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "6e6f7420656e6f7567682067617320666f7220636f6e73756d6572",
                        "id": 612,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "995:29:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_c816b0be31b4ff6568775c57154270cb6742b4541711a582b675ea909198f4b7",
                          "typeString": "literal_string \"not enough gas for consumer\""
                        },
                        "value": "not enough gas for consumer"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_c816b0be31b4ff6568775c57154270cb6742b4541711a582b675ea909198f4b7",
                          "typeString": "literal_string \"not enough gas for consumer\""
                        }
                      ],
                      "id": 607,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "971:7:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 613,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "971:54:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 614,
                  "nodeType": "ExpressionStatement",
                  "src": "971:54:7"
                },
                {
                  "assignments": [
                    616,
                    null
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 616,
                      "mutability": "mutable",
                      "name": "success",
                      "nameLocation": "1037:7:7",
                      "nodeType": "VariableDeclaration",
                      "scope": 622,
                      "src": "1032:12:7",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 615,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "1032:4:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "visibility": "internal"
                    },
                    null
                  ],
                  "id": 621,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 619,
                        "name": "resp",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 593,
                        "src": "1072:4:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "expression": {
                        "id": 617,
                        "name": "consumerContract",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 585,
                        "src": "1050:16:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 618,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "call",
                      "nodeType": "MemberAccess",
                      "src": "1050:21:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                        "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                      }
                    },
                    "id": 620,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1050:27:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                      "typeString": "tuple(bool,bytes memory)"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1031:46:7"
                }
              ]
            },
            "functionSelector": "cf55fe97",
            "id": 623,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "callBackWithRandomness",
            "nameLocation": "703:22:7",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 586,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 581,
                  "mutability": "mutable",
                  "name": "requestId",
                  "nameLocation": "739:9:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 623,
                  "src": "731:17:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 580,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "731:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 583,
                  "mutability": "mutable",
                  "name": "randomness",
                  "nameLocation": "762:10:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 623,
                  "src": "754:18:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 582,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "754:7:7",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 585,
                  "mutability": "mutable",
                  "name": "consumerContract",
                  "nameLocation": "786:16:7",
                  "nodeType": "VariableDeclaration",
                  "scope": 623,
                  "src": "778:24:7",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 584,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "778:7:7",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "725:81:7"
            },
            "returnParameters": {
              "id": 587,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "814:0:7"
            },
            "scope": 639,
            "src": "694:388:7",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 637,
              "nodeType": "Block",
              "src": "1106:77:7",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 632,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 626,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1120:3:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 627,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "1120:10:7",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "arguments": [
                            {
                              "id": 630,
                              "name": "LINK",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 527,
                              "src": "1142:4:7",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_LinkTokenInterface_$1011",
                                "typeString": "contract LinkTokenInterface"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_LinkTokenInterface_$1011",
                                "typeString": "contract LinkTokenInterface"
                              }
                            ],
                            "id": 629,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "1134:7:7",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 628,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "1134:7:7",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 631,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1134:13:7",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1120:27:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4d75737420757365204c494e4b20746f6b656e",
                        "id": 633,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "1149:21:7",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_e987a5305d985c4322166f34f5dcca15d7dfa4faebb15d40e05678e672e6a6a7",
                          "typeString": "literal_string \"Must use LINK token\""
                        },
                        "value": "Must use LINK token"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_e987a5305d985c4322166f34f5dcca15d7dfa4faebb15d40e05678e672e6a6a7",
                          "typeString": "literal_string \"Must use LINK token\""
                        }
                      ],
                      "id": 625,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "1112:7:7",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 634,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1112:59:7",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 635,
                  "nodeType": "ExpressionStatement",
                  "src": "1112:59:7"
                },
                {
                  "id": 636,
                  "nodeType": "PlaceholderStatement",
                  "src": "1177:1:7"
                }
              ]
            },
            "id": 638,
            "name": "onlyLINK",
            "nameLocation": "1095:8:7",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 624,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1103:2:7"
            },
            "src": "1086:97:7",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "scope": 640,
        "src": "192:993:7",
        "usedErrors": []
      }
    ],
    "src": "32:1153:7"
  },
  "bytecode": "608060405234801561001057600080fd5b506040516104a43803806104a483398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b610411806100936000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80631b6b6d2314610046578063a4c0ed3614610075578063cf55fe971461008a575b600080fd5b600054610059906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b61008861008336600461027c565b61009d565b005b610088610098366004610347565b61014c565b6000546001600160a01b031633146100f25760405162461bcd60e51b815260206004820152601360248201527226bab9ba103ab9b2902624a725903a37b5b2b760691b60448201526064015b60405180910390fd5b60008082806020019051810190610109919061037c565b915091508082866001600160a01b03167f7a9a0a6960d95b32cded93c30e63e7c2eb9e877230813c172110ea54dc1c915c60405160405180910390a45050505050565b604080516024810185905260448082018590528251808303909101815260649091019091526020810180516001600160e01b03166394985ddd60e01b179052600090620324b0805a10156101e25760405162461bcd60e51b815260206004820152601b60248201527f6e6f7420656e6f7567682067617320666f7220636f6e73756d6572000000000060448201526064016100e9565b6000846001600160a01b0316836040516101fc91906103a0565b6000604051808303816000865af19150503d8060008114610239576040519150601f19603f3d011682016040523d82523d6000602084013e61023e565b606091505b50505050505050505050565b80356001600160a01b038116811461026157600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561029157600080fd5b61029a8461024a565b925060208401359150604084013567ffffffffffffffff808211156102be57600080fd5b818601915086601f8301126102d257600080fd5b8135818111156102e4576102e4610266565b604051601f8201601f19908116603f0116810190838211818310171561030c5761030c610266565b8160405282815289602084870101111561032557600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b60008060006060848603121561035c57600080fd5b83359250602084013591506103736040850161024a565b90509250925092565b6000806040838503121561038f57600080fd5b505080516020909101519092909150565b6000825160005b818110156103c157602081860181015185830152016103a7565b818111156103d0576000828501525b50919091019291505056fea26469706673582212208aa257d0bf4d6eb48a82035e31bde2738513719fc6be8ba24772f51a68a413d664736f6c634300080b0033",
  "bytecodeSha1": "50b10027797b93250cffdfccb9eaa7b52fcfd1b9",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.11+commit.d7f03943"
  },
  "contractName": "VRFCoordinatorMock",
  "coverageMap": {
    "branches": {
      "2": {},
      "3": {},
      "5": {},
      "7": {
        "VRFCoordinatorMock.callBackWithRandomness": {
          "2": [
            979,
            993,
            true
          ]
        }
      }
    },
    "statements": {
      "2": {},
      "3": {},
      "5": {},
      "7": {
        "VRFCoordinatorMock.callBackWithRandomness": {
          "1": [
            971,
            1025
          ]
        },
        "VRFCoordinatorMock.onTokenTransfer": {
          "0": [
            640,
            685
          ]
        }
      }
    }
  },
  "dependencies": [
    "smartcontractkit/chainlink-brownie-contracts@0.2.2/LinkTokenInterface",
    "smartcontractkit/chainlink-brownie-contracts@0.2.2/VRFConsumerBase",
    "smartcontractkit/chainlink-brownie-contracts@0.2.2/VRFRequestIDBase"
  ],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100415760003560e01c80631b6b6d2314610046578063a4c0ed3614610075578063cf55fe971461008a575b600080fd5b600054610059906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b61008861008336600461027c565b61009d565b005b610088610098366004610347565b61014c565b6000546001600160a01b031633146100f25760405162461bcd60e51b815260206004820152601360248201527226bab9ba103ab9b2902624a725903a37b5b2b760691b60448201526064015b60405180910390fd5b60008082806020019051810190610109919061037c565b915091508082866001600160a01b03167f7a9a0a6960d95b32cded93c30e63e7c2eb9e877230813c172110ea54dc1c915c60405160405180910390a45050505050565b604080516024810185905260448082018590528251808303909101815260649091019091526020810180516001600160e01b03166394985ddd60e01b179052600090620324b0805a10156101e25760405162461bcd60e51b815260206004820152601b60248201527f6e6f7420656e6f7567682067617320666f7220636f6e73756d6572000000000060448201526064016100e9565b6000846001600160a01b0316836040516101fc91906103a0565b6000604051808303816000865af19150503d8060008114610239576040519150601f19603f3d011682016040523d82523d6000602084013e61023e565b606091505b50505050505050505050565b80356001600160a01b038116811461026157600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561029157600080fd5b61029a8461024a565b925060208401359150604084013567ffffffffffffffff808211156102be57600080fd5b818601915086601f8301126102d257600080fd5b8135818111156102e4576102e4610266565b604051601f8201601f19908116603f0116810190838211818310171561030c5761030c610266565b8160405282815289602084870101111561032557600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b60008060006060848603121561035c57600080fd5b83359250602084013591506103736040850161024a565b90509250925092565b6000806040838503121561038f57600080fd5b505080516020909101519092909150565b6000825160005b818110156103c157602081860181015185830152016103a7565b818111156103d0576000828501525b50919091019291505056fea26469706673582212208aa257d0bf4d6eb48a82035e31bde2738513719fc6be8ba24772f51a68a413d664736f6c634300080b0033",
  "deployedSourceMap": "192:993:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;224:30;;;;;-1:-1:-1;;;;;224:30:7;;;;;;-1:-1:-1;;;;;205:32:8;;;187:51;;175:2;160:18;224:30:7;;;;;;;451:239;;;;;;:::i;:::-;;:::i;:::-;;694:388;;;;;;:::i;:::-;;:::i;451:239::-;1142:4;;-1:-1:-1;;;;;1142:4:7;1120:10;:27;1112:59;;;;-1:-1:-1;;;1112:59:7;;2156:2:8;1112:59:7;;;2138:21:8;2195:2;2175:18;;;2168:30;-1:-1:-1;;;2214:18:8;;;2207:49;2273:18;;1112:59:7;;;;;;;;;564:15:::1;581:12:::0;608:5:::1;597:37;;;;;;;;;;;;:::i;:::-;563:71;;;;680:4;671:7;663:6;-1:-1:-1::0;;;;;645:40:7::1;;;;;;;;;;;557:133;;451:239:::0;;;:::o;694:388::-;863:78;;;;;;2726:25:8;;;2767:18;;;;2760:34;;;863:78:7;;;;;;;;;;2699:18:8;;;;863:78:7;;;;;;;;-1:-1:-1;;;;;863:78:7;-1:-1:-1;;;863:78:7;;;-1:-1:-1;;959:6:7;;979:9;:14;;971:54;;;;-1:-1:-1;;;971:54:7;;3007:2:8;971:54:7;;;2989:21:8;3046:2;3026:18;;;3019:30;3085:29;3065:18;;;3058:57;3132:18;;971:54:7;2805:351:8;971:54:7;1032:12;1050:16;-1:-1:-1;;;;;1050:21:7;1072:4;1050:27;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;694:388:7:o;249:173:8:-;317:20;;-1:-1:-1;;;;;366:31:8;;356:42;;346:70;;412:1;409;402:12;346:70;249:173;;;:::o;427:127::-;488:10;483:3;479:20;476:1;469:31;519:4;516:1;509:15;543:4;540:1;533:15;559:1063;645:6;653;661;714:2;702:9;693:7;689:23;685:32;682:52;;;730:1;727;720:12;682:52;753:29;772:9;753:29;:::i;:::-;743:39;;829:2;818:9;814:18;801:32;791:42;;884:2;873:9;869:18;856:32;907:18;948:2;940:6;937:14;934:34;;;964:1;961;954:12;934:34;1002:6;991:9;987:22;977:32;;1047:7;1040:4;1036:2;1032:13;1028:27;1018:55;;1069:1;1066;1059:12;1018:55;1105:2;1092:16;1127:2;1123;1120:10;1117:36;;;1133:18;;:::i;:::-;1208:2;1202:9;1176:2;1262:13;;-1:-1:-1;;1258:22:8;;;1282:2;1254:31;1250:40;1238:53;;;1306:18;;;1326:22;;;1303:46;1300:72;;;1352:18;;:::i;:::-;1392:10;1388:2;1381:22;1427:2;1419:6;1412:18;1467:7;1462:2;1457;1453;1449:11;1445:20;1442:33;1439:53;;;1488:1;1485;1478:12;1439:53;1544:2;1539;1535;1531:11;1526:2;1518:6;1514:15;1501:46;1589:1;1584:2;1579;1571:6;1567:15;1563:24;1556:35;1610:6;1600:16;;;;;;;559:1063;;;;;:::o;1627:322::-;1704:6;1712;1720;1773:2;1761:9;1752:7;1748:23;1744:32;1741:52;;;1789:1;1786;1779:12;1741:52;1825:9;1812:23;1802:33;;1882:2;1871:9;1867:18;1854:32;1844:42;;1905:38;1939:2;1928:9;1924:18;1905:38;:::i;:::-;1895:48;;1627:322;;;;;:::o;2302:245::-;2381:6;2389;2442:2;2430:9;2421:7;2417:23;2413:32;2410:52;;;2458:1;2455;2448:12;2410:52;-1:-1:-1;;2481:16:8;;2537:2;2522:18;;;2516:25;2481:16;;2516:25;;-1:-1:-1;2302:245:8:o;3161:426::-;3290:3;3328:6;3322:13;3353:1;3363:129;3377:6;3374:1;3371:13;3363:129;;;3475:4;3459:14;;;3455:25;;3449:32;3436:11;;;3429:53;3392:12;3363:129;;;3510:6;3507:1;3504:13;3501:48;;;3545:1;3536:6;3531:3;3527:16;3520:27;3501:48;-1:-1:-1;3565:16:8;;;;;3161:426;-1:-1:-1;;3161:426:8:o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "offset": [
    192,
    1185
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1B6B6D23 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0xA4C0ED36 EQ PUSH2 0x75 JUMPI DUP1 PUSH4 0xCF55FE97 EQ PUSH2 0x8A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x59 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x88 PUSH2 0x83 CALLDATASIZE PUSH1 0x4 PUSH2 0x27C JUMP JUMPDEST PUSH2 0x9D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x88 PUSH2 0x98 CALLDATASIZE PUSH1 0x4 PUSH2 0x347 JUMP JUMPDEST PUSH2 0x14C JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xF2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x26BAB9BA103AB9B2902624A725903A37B5B2B7 PUSH1 0x69 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x109 SWAP2 SWAP1 PUSH2 0x37C JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 DUP3 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x7A9A0A6960D95B32CDED93C30E63E7C2EB9E877230813C172110EA54DC1C915C PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP6 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0x94985DDD PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH3 0x324B0 DUP1 GAS LT ISZERO PUSH2 0x1E2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6E6F7420656E6F7567682067617320666F7220636F6E73756D65720000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xE9 JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x1FC SWAP2 SWAP1 PUSH2 0x3A0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x239 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x23E JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x261 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x291 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x29A DUP5 PUSH2 0x24A JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x2E4 JUMPI PUSH2 0x2E4 PUSH2 0x266 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x30C JUMPI PUSH2 0x30C PUSH2 0x266 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP10 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x325 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x35C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH2 0x373 PUSH1 0x40 DUP6 ADD PUSH2 0x24A JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x38F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 SWAP1 SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3C1 JUMPI PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD MLOAD DUP6 DUP4 ADD MSTORE ADD PUSH2 0x3A7 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x3D0 JUMPI PUSH1 0x0 DUP3 DUP6 ADD MSTORE JUMPDEST POP SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP11 LOG2 JUMPI 0xD0 0xBF 0x4D PUSH15 0xB48A82035E31BDE2738513719FC6BE DUP12 LOG2 SELFBALANCE PUSH19 0xF51A68A413D664736F6C634300080B00330000 ",
  "pcMap": {
    "0": {
      "offset": [
        192,
        1185
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        192,
        1185
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        192,
        1185
      ],
      "op": "MSTORE",
      "path": "7"
    },
    "5": {
      "fn": null,
      "offset": [
        192,
        1185
      ],
      "op": "CALLVALUE",
      "path": "7"
    },
    "6": {
      "fn": null,
      "offset": [
        192,
        1185
      ],
      "op": "DUP1",
      "path": "7"
    },
    "7": {
      "fn": null,
      "offset": [
        192,
        1185
      ],
      "op": "ISZERO",
      "path": "7"
    },
    "8": {
      "fn": null,
      "offset": [
        192,
        1185
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        192,
        1185
      ],
      "op": "JUMPI",
      "path": "7"
    },
    "12": {
      "fn": null,
      "offset": [
        192,
        1185
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        192,
        1185
      ],
      "op": "DUP1",
      "path": "7"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        192,
        1185
      ],
      "op": "REVERT",
      "path": "7"
    },
    "16": {
      "fn": null,
      "offset": [
        192,
        1185
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "17": {
      "fn": null,
      "offset": [
        192,
        1185
      ],
      "op": "POP",
      "path": "7"
    },
    "18": {
      "fn": null,
      "offset": [
        192,
        1185
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        192,
        1185
      ],
      "op": "CALLDATASIZE",
      "path": "7"
    },
    "21": {
      "fn": null,
      "offset": [
        192,
        1185
      ],
      "op": "LT",
      "path": "7"
    },
    "22": {
      "fn": null,
      "offset": [
        192,
        1185
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x41"
    },
    "25": {
      "fn": null,
      "offset": [
        192,
        1185
      ],
      "op": "JUMPI",
      "path": "7"
    },
    "26": {
      "fn": null,
      "offset": [
        192,
        1185
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        192,
        1185
      ],
      "op": "CALLDATALOAD",
      "path": "7"
    },
    "29": {
      "fn": null,
      "offset": [
        192,
        1185
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        192,
        1185
      ],
      "op": "SHR",
      "path": "7"
    },
    "32": {
      "fn": null,
      "offset": [
        192,
        1185
      ],
      "op": "DUP1",
      "path": "7"
    },
    "33": {
      "fn": null,
      "offset": [
        192,
        1185
      ],
      "op": "PUSH4",
      "path": "7",
      "value": "0x1B6B6D23"
    },
    "38": {
      "fn": null,
      "offset": [
        192,
        1185
      ],
      "op": "EQ",
      "path": "7"
    },
    "39": {
      "fn": null,
      "offset": [
        192,
        1185
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x46"
    },
    "42": {
      "fn": null,
      "offset": [
        192,
        1185
      ],
      "op": "JUMPI",
      "path": "7"
    },
    "43": {
      "fn": null,
      "offset": [
        192,
        1185
      ],
      "op": "DUP1",
      "path": "7"
    },
    "44": {
      "fn": null,
      "offset": [
        192,
        1185
      ],
      "op": "PUSH4",
      "path": "7",
      "value": "0xA4C0ED36"
    },
    "49": {
      "fn": null,
      "offset": [
        192,
        1185
      ],
      "op": "EQ",
      "path": "7"
    },
    "50": {
      "fn": null,
      "offset": [
        192,
        1185
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x75"
    },
    "53": {
      "fn": null,
      "offset": [
        192,
        1185
      ],
      "op": "JUMPI",
      "path": "7"
    },
    "54": {
      "fn": null,
      "offset": [
        192,
        1185
      ],
      "op": "DUP1",
      "path": "7"
    },
    "55": {
      "fn": null,
      "offset": [
        192,
        1185
      ],
      "op": "PUSH4",
      "path": "7",
      "value": "0xCF55FE97"
    },
    "60": {
      "fn": null,
      "offset": [
        192,
        1185
      ],
      "op": "EQ",
      "path": "7"
    },
    "61": {
      "fn": null,
      "offset": [
        192,
        1185
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x8A"
    },
    "64": {
      "fn": null,
      "offset": [
        192,
        1185
      ],
      "op": "JUMPI",
      "path": "7"
    },
    "65": {
      "fn": null,
      "offset": [
        192,
        1185
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "66": {
      "fn": null,
      "offset": [
        192,
        1185
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x0"
    },
    "68": {
      "fn": null,
      "offset": [
        192,
        1185
      ],
      "op": "DUP1",
      "path": "7"
    },
    "69": {
      "first_revert": true,
      "fn": null,
      "offset": [
        192,
        1185
      ],
      "op": "REVERT",
      "path": "7"
    },
    "70": {
      "offset": [
        224,
        254
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "71": {
      "fn": null,
      "offset": [
        224,
        254
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x0"
    },
    "73": {
      "fn": null,
      "offset": [
        224,
        254
      ],
      "op": "SLOAD",
      "path": "7"
    },
    "74": {
      "fn": null,
      "offset": [
        224,
        254
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x59"
    },
    "77": {
      "fn": null,
      "offset": [
        224,
        254
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "78": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "80": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "82": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "84": {
      "op": "SHL"
    },
    "85": {
      "op": "SUB"
    },
    "86": {
      "offset": [
        224,
        254
      ],
      "op": "AND",
      "path": "7"
    },
    "87": {
      "fn": null,
      "offset": [
        224,
        254
      ],
      "op": "DUP2",
      "path": "7"
    },
    "88": {
      "fn": null,
      "offset": [
        224,
        254
      ],
      "op": "JUMP",
      "path": "7"
    },
    "89": {
      "fn": null,
      "offset": [
        224,
        254
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "90": {
      "fn": null,
      "offset": [
        224,
        254
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "92": {
      "fn": null,
      "offset": [
        224,
        254
      ],
      "op": "MLOAD",
      "path": "7"
    },
    "93": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "95": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "97": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "99": {
      "op": "SHL"
    },
    "100": {
      "op": "SUB"
    },
    "101": {
      "op": "SWAP1"
    },
    "102": {
      "op": "SWAP2"
    },
    "103": {
      "op": "AND"
    },
    "104": {
      "op": "DUP2"
    },
    "105": {
      "op": "MSTORE"
    },
    "106": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "108": {
      "op": "ADD"
    },
    "109": {
      "offset": [
        224,
        254
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "111": {
      "fn": null,
      "offset": [
        224,
        254
      ],
      "op": "MLOAD",
      "path": "7"
    },
    "112": {
      "fn": null,
      "offset": [
        224,
        254
      ],
      "op": "DUP1",
      "path": "7"
    },
    "113": {
      "fn": null,
      "offset": [
        224,
        254
      ],
      "op": "SWAP2",
      "path": "7"
    },
    "114": {
      "fn": null,
      "offset": [
        224,
        254
      ],
      "op": "SUB",
      "path": "7"
    },
    "115": {
      "fn": null,
      "offset": [
        224,
        254
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "116": {
      "fn": null,
      "offset": [
        224,
        254
      ],
      "op": "RETURN",
      "path": "7"
    },
    "117": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        451,
        690
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "118": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        451,
        690
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x88"
    },
    "121": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        451,
        690
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x83"
    },
    "124": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        451,
        690
      ],
      "op": "CALLDATASIZE",
      "path": "7"
    },
    "125": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        451,
        690
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x4"
    },
    "127": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        451,
        690
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x27C"
    },
    "130": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "jump": "i",
      "offset": [
        451,
        690
      ],
      "op": "JUMP",
      "path": "7"
    },
    "131": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        451,
        690
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "132": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        451,
        690
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x9D"
    },
    "135": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "jump": "i",
      "offset": [
        451,
        690
      ],
      "op": "JUMP",
      "path": "7"
    },
    "136": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        451,
        690
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "137": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        451,
        690
      ],
      "op": "STOP",
      "path": "7"
    },
    "138": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        694,
        1082
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "139": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        694,
        1082
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x88"
    },
    "142": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        694,
        1082
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x98"
    },
    "145": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        694,
        1082
      ],
      "op": "CALLDATASIZE",
      "path": "7"
    },
    "146": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        694,
        1082
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x4"
    },
    "148": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        694,
        1082
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x347"
    },
    "151": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "jump": "i",
      "offset": [
        694,
        1082
      ],
      "op": "JUMP",
      "path": "7"
    },
    "152": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        694,
        1082
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "153": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        694,
        1082
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x14C"
    },
    "156": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "jump": "i",
      "offset": [
        694,
        1082
      ],
      "op": "JUMP",
      "path": "7"
    },
    "157": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        451,
        690
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "158": {
      "offset": [
        1142,
        1146
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x0"
    },
    "160": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        1142,
        1146
      ],
      "op": "SLOAD",
      "path": "7"
    },
    "161": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "163": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "165": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "167": {
      "op": "SHL"
    },
    "168": {
      "op": "SUB"
    },
    "169": {
      "offset": [
        1142,
        1146
      ],
      "op": "AND",
      "path": "7"
    },
    "170": {
      "offset": [
        1120,
        1130
      ],
      "op": "CALLER",
      "path": "7"
    },
    "171": {
      "offset": [
        1120,
        1147
      ],
      "op": "EQ",
      "path": "7"
    },
    "172": {
      "offset": [
        1112,
        1171
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0xF2"
    },
    "175": {
      "offset": [
        1112,
        1171
      ],
      "op": "JUMPI",
      "path": "7"
    },
    "176": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        1112,
        1171
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "178": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        1112,
        1171
      ],
      "op": "MLOAD",
      "path": "7"
    },
    "179": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "183": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "185": {
      "op": "SHL"
    },
    "186": {
      "offset": [
        1112,
        1171
      ],
      "op": "DUP2",
      "path": "7"
    },
    "187": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        1112,
        1171
      ],
      "op": "MSTORE",
      "path": "7"
    },
    "188": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "190": {
      "offset": [
        1112,
        1171
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x4"
    },
    "192": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        1112,
        1171
      ],
      "op": "DUP3",
      "path": "7"
    },
    "193": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        1112,
        1171
      ],
      "op": "ADD",
      "path": "7"
    },
    "194": {
      "op": "MSTORE"
    },
    "195": {
      "op": "PUSH1",
      "value": "0x13"
    },
    "197": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "199": {
      "op": "DUP3"
    },
    "200": {
      "op": "ADD"
    },
    "201": {
      "op": "MSTORE"
    },
    "202": {
      "op": "PUSH19",
      "value": "0x26BAB9BA103AB9B2902624A725903A37B5B2B7"
    },
    "222": {
      "op": "PUSH1",
      "value": "0x69"
    },
    "224": {
      "op": "SHL"
    },
    "225": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "227": {
      "op": "DUP3"
    },
    "228": {
      "op": "ADD"
    },
    "229": {
      "op": "MSTORE"
    },
    "230": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "232": {
      "op": "ADD"
    },
    "233": {
      "offset": [
        1112,
        1171
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "234": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        1112,
        1171
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "236": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        1112,
        1171
      ],
      "op": "MLOAD",
      "path": "7"
    },
    "237": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        1112,
        1171
      ],
      "op": "DUP1",
      "path": "7"
    },
    "238": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        1112,
        1171
      ],
      "op": "SWAP2",
      "path": "7"
    },
    "239": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        1112,
        1171
      ],
      "op": "SUB",
      "path": "7"
    },
    "240": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        1112,
        1171
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "241": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        1112,
        1171
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "7"
    },
    "242": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        1112,
        1171
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "243": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        564,
        579
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x0"
    },
    "245": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        581,
        593
      ],
      "op": "DUP1",
      "path": "7"
    },
    "246": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        608,
        613
      ],
      "op": "DUP3",
      "path": "7"
    },
    "247": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        597,
        634
      ],
      "op": "DUP1",
      "path": "7"
    },
    "248": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        597,
        634
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x20"
    },
    "250": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        597,
        634
      ],
      "op": "ADD",
      "path": "7"
    },
    "251": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        597,
        634
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "252": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        597,
        634
      ],
      "op": "MLOAD",
      "path": "7"
    },
    "253": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        597,
        634
      ],
      "op": "DUP2",
      "path": "7"
    },
    "254": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        597,
        634
      ],
      "op": "ADD",
      "path": "7"
    },
    "255": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        597,
        634
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "256": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        597,
        634
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x109"
    },
    "259": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        597,
        634
      ],
      "op": "SWAP2",
      "path": "7"
    },
    "260": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        597,
        634
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "261": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        597,
        634
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x37C"
    },
    "264": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "jump": "i",
      "offset": [
        597,
        634
      ],
      "op": "JUMP",
      "path": "7"
    },
    "265": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        597,
        634
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "266": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        563,
        634
      ],
      "op": "SWAP2",
      "path": "7"
    },
    "267": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        563,
        634
      ],
      "op": "POP",
      "path": "7"
    },
    "268": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        563,
        634
      ],
      "op": "SWAP2",
      "path": "7"
    },
    "269": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        563,
        634
      ],
      "op": "POP",
      "path": "7"
    },
    "270": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        680,
        684
      ],
      "op": "DUP1",
      "path": "7",
      "statement": 0
    },
    "271": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        671,
        678
      ],
      "op": "DUP3",
      "path": "7"
    },
    "272": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        663,
        669
      ],
      "op": "DUP7",
      "path": "7"
    },
    "273": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "275": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "277": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "279": {
      "op": "SHL"
    },
    "280": {
      "op": "SUB"
    },
    "281": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        645,
        685
      ],
      "op": "AND",
      "path": "7"
    },
    "282": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        645,
        685
      ],
      "op": "PUSH32",
      "path": "7",
      "value": "0x7A9A0A6960D95B32CDED93C30E63E7C2EB9E877230813C172110EA54DC1C915C"
    },
    "315": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        645,
        685
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "317": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        645,
        685
      ],
      "op": "MLOAD",
      "path": "7"
    },
    "318": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        645,
        685
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "320": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        645,
        685
      ],
      "op": "MLOAD",
      "path": "7"
    },
    "321": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        645,
        685
      ],
      "op": "DUP1",
      "path": "7"
    },
    "322": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        645,
        685
      ],
      "op": "SWAP2",
      "path": "7"
    },
    "323": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        645,
        685
      ],
      "op": "SUB",
      "path": "7"
    },
    "324": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        645,
        685
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "325": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        645,
        685
      ],
      "op": "LOG4",
      "path": "7"
    },
    "326": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        557,
        690
      ],
      "op": "POP",
      "path": "7"
    },
    "327": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        557,
        690
      ],
      "op": "POP",
      "path": "7"
    },
    "328": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        451,
        690
      ],
      "op": "POP",
      "path": "7"
    },
    "329": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        451,
        690
      ],
      "op": "POP",
      "path": "7"
    },
    "330": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "offset": [
        451,
        690
      ],
      "op": "POP",
      "path": "7"
    },
    "331": {
      "fn": "VRFCoordinatorMock.onTokenTransfer",
      "jump": "o",
      "offset": [
        451,
        690
      ],
      "op": "JUMP",
      "path": "7"
    },
    "332": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        694,
        1082
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "333": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        863,
        941
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "335": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        863,
        941
      ],
      "op": "DUP1",
      "path": "7"
    },
    "336": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        863,
        941
      ],
      "op": "MLOAD",
      "path": "7"
    },
    "337": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        863,
        941
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x24"
    },
    "339": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        863,
        941
      ],
      "op": "DUP2",
      "path": "7"
    },
    "340": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        863,
        941
      ],
      "op": "ADD",
      "path": "7"
    },
    "341": {
      "op": "DUP6"
    },
    "342": {
      "op": "SWAP1"
    },
    "343": {
      "op": "MSTORE"
    },
    "344": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "346": {
      "op": "DUP1"
    },
    "347": {
      "op": "DUP3"
    },
    "348": {
      "op": "ADD"
    },
    "349": {
      "op": "DUP6"
    },
    "350": {
      "op": "SWAP1"
    },
    "351": {
      "op": "MSTORE"
    },
    "352": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        863,
        941
      ],
      "op": "DUP3",
      "path": "7"
    },
    "353": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        863,
        941
      ],
      "op": "MLOAD",
      "path": "7"
    },
    "354": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        863,
        941
      ],
      "op": "DUP1",
      "path": "7"
    },
    "355": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        863,
        941
      ],
      "op": "DUP4",
      "path": "7"
    },
    "356": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        863,
        941
      ],
      "op": "SUB",
      "path": "7"
    },
    "357": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        863,
        941
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "358": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        863,
        941
      ],
      "op": "SWAP2",
      "path": "7"
    },
    "359": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        863,
        941
      ],
      "op": "ADD",
      "path": "7"
    },
    "360": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        863,
        941
      ],
      "op": "DUP2",
      "path": "7"
    },
    "361": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        863,
        941
      ],
      "op": "MSTORE",
      "path": "7"
    },
    "362": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "364": {
      "op": "SWAP1"
    },
    "365": {
      "op": "SWAP2"
    },
    "366": {
      "op": "ADD"
    },
    "367": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        863,
        941
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "368": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        863,
        941
      ],
      "op": "SWAP2",
      "path": "7"
    },
    "369": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        863,
        941
      ],
      "op": "MSTORE",
      "path": "7"
    },
    "370": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        863,
        941
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x20"
    },
    "372": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        863,
        941
      ],
      "op": "DUP2",
      "path": "7"
    },
    "373": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        863,
        941
      ],
      "op": "ADD",
      "path": "7"
    },
    "374": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        863,
        941
      ],
      "op": "DUP1",
      "path": "7"
    },
    "375": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        863,
        941
      ],
      "op": "MLOAD",
      "path": "7"
    },
    "376": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "378": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "380": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "382": {
      "op": "SHL"
    },
    "383": {
      "op": "SUB"
    },
    "384": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        863,
        941
      ],
      "op": "AND",
      "path": "7"
    },
    "385": {
      "op": "PUSH4",
      "value": "0x94985DDD"
    },
    "390": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "392": {
      "op": "SHL"
    },
    "393": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        863,
        941
      ],
      "op": "OR",
      "path": "7"
    },
    "394": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        863,
        941
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "395": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        863,
        941
      ],
      "op": "MSTORE",
      "path": "7"
    },
    "396": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "398": {
      "op": "SWAP1"
    },
    "399": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        959,
        965
      ],
      "op": "PUSH3",
      "path": "7",
      "value": "0x324B0"
    },
    "403": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        959,
        965
      ],
      "op": "DUP1",
      "path": "7"
    },
    "404": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        979,
        988
      ],
      "op": "GAS",
      "path": "7",
      "statement": 1
    },
    "405": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        979,
        993
      ],
      "op": "LT",
      "path": "7"
    },
    "406": {
      "branch": 2,
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        979,
        993
      ],
      "op": "ISZERO",
      "path": "7"
    },
    "407": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        971,
        1025
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x1E2"
    },
    "410": {
      "branch": 2,
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        971,
        1025
      ],
      "op": "JUMPI",
      "path": "7"
    },
    "411": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        971,
        1025
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "413": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        971,
        1025
      ],
      "op": "MLOAD",
      "path": "7"
    },
    "414": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "418": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "420": {
      "op": "SHL"
    },
    "421": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        971,
        1025
      ],
      "op": "DUP2",
      "path": "7"
    },
    "422": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        971,
        1025
      ],
      "op": "MSTORE",
      "path": "7"
    },
    "423": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "425": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        971,
        1025
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x4"
    },
    "427": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        971,
        1025
      ],
      "op": "DUP3",
      "path": "7"
    },
    "428": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        971,
        1025
      ],
      "op": "ADD",
      "path": "7"
    },
    "429": {
      "op": "MSTORE"
    },
    "430": {
      "op": "PUSH1",
      "value": "0x1B"
    },
    "432": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "434": {
      "op": "DUP3"
    },
    "435": {
      "op": "ADD"
    },
    "436": {
      "op": "MSTORE"
    },
    "437": {
      "op": "PUSH32",
      "value": "0x6E6F7420656E6F7567682067617320666F7220636F6E73756D65720000000000"
    },
    "470": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "472": {
      "op": "DUP3"
    },
    "473": {
      "op": "ADD"
    },
    "474": {
      "op": "MSTORE"
    },
    "475": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "477": {
      "op": "ADD"
    },
    "478": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        971,
        1025
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0xE9"
    },
    "481": {
      "op": "JUMP"
    },
    "482": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        971,
        1025
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "483": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1032,
        1044
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x0"
    },
    "485": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1066
      ],
      "op": "DUP5",
      "path": "7"
    },
    "486": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "488": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "490": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "492": {
      "op": "SHL"
    },
    "493": {
      "op": "SUB"
    },
    "494": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1071
      ],
      "op": "AND",
      "path": "7"
    },
    "495": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1072,
        1076
      ],
      "op": "DUP4",
      "path": "7"
    },
    "496": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "498": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "MLOAD",
      "path": "7"
    },
    "499": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x1FC"
    },
    "502": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "SWAP2",
      "path": "7"
    },
    "503": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "SWAP1",
      "path": "7"
    },
    "504": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x3A0"
    },
    "507": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "jump": "i",
      "offset": [
        1050,
        1077
      ],
      "op": "JUMP",
      "path": "7"
    },
    "508": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "509": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x0"
    },
    "511": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "513": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "MLOAD",
      "path": "7"
    },
    "514": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "DUP1",
      "path": "7"
    },
    "515": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "DUP4",
      "path": "7"
    },
    "516": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "SUB",
      "path": "7"
    },
    "517": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "DUP2",
      "path": "7"
    },
    "518": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x0"
    },
    "520": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "DUP7",
      "path": "7"
    },
    "521": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "GAS",
      "path": "7"
    },
    "522": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "CALL",
      "path": "7"
    },
    "523": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "SWAP2",
      "path": "7"
    },
    "524": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "POP",
      "path": "7"
    },
    "525": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "POP",
      "path": "7"
    },
    "526": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "RETURNDATASIZE",
      "path": "7"
    },
    "527": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "DUP1",
      "path": "7"
    },
    "528": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x0"
    },
    "530": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "DUP2",
      "path": "7"
    },
    "531": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "EQ",
      "path": "7"
    },
    "532": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x239"
    },
    "535": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "JUMPI",
      "path": "7"
    },
    "536": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "538": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "MLOAD",
      "path": "7"
    },
    "539": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "SWAP2",
      "path": "7"
    },
    "540": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "POP",
      "path": "7"
    },
    "541": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x1F"
    },
    "543": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "NOT",
      "path": "7"
    },
    "544": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x3F"
    },
    "546": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "RETURNDATASIZE",
      "path": "7"
    },
    "547": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "ADD",
      "path": "7"
    },
    "548": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "AND",
      "path": "7"
    },
    "549": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "DUP3",
      "path": "7"
    },
    "550": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "ADD",
      "path": "7"
    },
    "551": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x40"
    },
    "553": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "MSTORE",
      "path": "7"
    },
    "554": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "RETURNDATASIZE",
      "path": "7"
    },
    "555": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "DUP3",
      "path": "7"
    },
    "556": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "MSTORE",
      "path": "7"
    },
    "557": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "RETURNDATASIZE",
      "path": "7"
    },
    "558": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x0"
    },
    "560": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x20"
    },
    "562": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "DUP5",
      "path": "7"
    },
    "563": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "ADD",
      "path": "7"
    },
    "564": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "RETURNDATACOPY",
      "path": "7"
    },
    "565": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "PUSH2",
      "path": "7",
      "value": "0x23E"
    },
    "568": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "JUMP",
      "path": "7"
    },
    "569": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "570": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "PUSH1",
      "path": "7",
      "value": "0x60"
    },
    "572": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "SWAP2",
      "path": "7"
    },
    "573": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "POP",
      "path": "7"
    },
    "574": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "offset": [
        1050,
        1077
      ],
      "op": "JUMPDEST",
      "path": "7"
    },
    "575": {
      "op": "POP"
    },
    "576": {
      "op": "POP"
    },
    "577": {
      "op": "POP"
    },
    "578": {
      "op": "POP"
    },
    "579": {
      "op": "POP"
    },
    "580": {
      "op": "POP"
    },
    "581": {
      "op": "POP"
    },
    "582": {
      "op": "POP"
    },
    "583": {
      "op": "POP"
    },
    "584": {
      "op": "POP"
    },
    "585": {
      "fn": "VRFCoordinatorMock.callBackWithRandomness",
      "jump": "o",
      "offset": [
        694,
        1082
      ],
      "op": "JUMP",
      "path": "7"
    },
    "586": {
      "op": "JUMPDEST"
    },
    "587": {
      "op": "DUP1"
    },
    "588": {
      "op": "CALLDATALOAD"
    },
    "589": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "591": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "593": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "595": {
      "op": "SHL"
    },
    "596": {
      "op": "SUB"
    },
    "597": {
      "op": "DUP2"
    },
    "598": {
      "op": "AND"
    },
    "599": {
      "op": "DUP2"
    },
    "600": {
      "op": "EQ"
    },
    "601": {
      "op": "PUSH2",
      "value": "0x261"
    },
    "604": {
      "op": "JUMPI"
    },
    "605": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "607": {
      "op": "DUP1"
    },
    "608": {
      "op": "REVERT"
    },
    "609": {
      "op": "JUMPDEST"
    },
    "610": {
      "op": "SWAP2"
    },
    "611": {
      "op": "SWAP1"
    },
    "612": {
      "op": "POP"
    },
    "613": {
      "jump": "o",
      "op": "JUMP"
    },
    "614": {
      "op": "JUMPDEST"
    },
    "615": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "620": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "622": {
      "op": "SHL"
    },
    "623": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "625": {
      "op": "MSTORE"
    },
    "626": {
      "op": "PUSH1",
      "value": "0x41"
    },
    "628": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "630": {
      "op": "MSTORE"
    },
    "631": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "633": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "635": {
      "op": "REVERT"
    },
    "636": {
      "op": "JUMPDEST"
    },
    "637": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "639": {
      "op": "DUP1"
    },
    "640": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "642": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "644": {
      "op": "DUP5"
    },
    "645": {
      "op": "DUP7"
    },
    "646": {
      "op": "SUB"
    },
    "647": {
      "op": "SLT"
    },
    "648": {
      "op": "ISZERO"
    },
    "649": {
      "op": "PUSH2",
      "value": "0x291"
    },
    "652": {
      "op": "JUMPI"
    },
    "653": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "655": {
      "op": "DUP1"
    },
    "656": {
      "op": "REVERT"
    },
    "657": {
      "op": "JUMPDEST"
    },
    "658": {
      "op": "PUSH2",
      "value": "0x29A"
    },
    "661": {
      "op": "DUP5"
    },
    "662": {
      "op": "PUSH2",
      "value": "0x24A"
    },
    "665": {
      "jump": "i",
      "op": "JUMP"
    },
    "666": {
      "op": "JUMPDEST"
    },
    "667": {
      "op": "SWAP3"
    },
    "668": {
      "op": "POP"
    },
    "669": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "671": {
      "op": "DUP5"
    },
    "672": {
      "op": "ADD"
    },
    "673": {
      "op": "CALLDATALOAD"
    },
    "674": {
      "op": "SWAP2"
    },
    "675": {
      "op": "POP"
    },
    "676": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "678": {
      "op": "DUP5"
    },
    "679": {
      "op": "ADD"
    },
    "680": {
      "op": "CALLDATALOAD"
    },
    "681": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "690": {
      "op": "DUP1"
    },
    "691": {
      "op": "DUP3"
    },
    "692": {
      "op": "GT"
    },
    "693": {
      "op": "ISZERO"
    },
    "694": {
      "op": "PUSH2",
      "value": "0x2BE"
    },
    "697": {
      "op": "JUMPI"
    },
    "698": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "700": {
      "op": "DUP1"
    },
    "701": {
      "op": "REVERT"
    },
    "702": {
      "op": "JUMPDEST"
    },
    "703": {
      "op": "DUP2"
    },
    "704": {
      "op": "DUP7"
    },
    "705": {
      "op": "ADD"
    },
    "706": {
      "op": "SWAP2"
    },
    "707": {
      "op": "POP"
    },
    "708": {
      "op": "DUP7"
    },
    "709": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "711": {
      "op": "DUP4"
    },
    "712": {
      "op": "ADD"
    },
    "713": {
      "op": "SLT"
    },
    "714": {
      "op": "PUSH2",
      "value": "0x2D2"
    },
    "717": {
      "op": "JUMPI"
    },
    "718": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "720": {
      "op": "DUP1"
    },
    "721": {
      "op": "REVERT"
    },
    "722": {
      "op": "JUMPDEST"
    },
    "723": {
      "op": "DUP2"
    },
    "724": {
      "op": "CALLDATALOAD"
    },
    "725": {
      "op": "DUP2"
    },
    "726": {
      "op": "DUP2"
    },
    "727": {
      "op": "GT"
    },
    "728": {
      "op": "ISZERO"
    },
    "729": {
      "op": "PUSH2",
      "value": "0x2E4"
    },
    "732": {
      "op": "JUMPI"
    },
    "733": {
      "op": "PUSH2",
      "value": "0x2E4"
    },
    "736": {
      "op": "PUSH2",
      "value": "0x266"
    },
    "739": {
      "jump": "i",
      "op": "JUMP"
    },
    "740": {
      "op": "JUMPDEST"
    },
    "741": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "743": {
      "op": "MLOAD"
    },
    "744": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "746": {
      "op": "DUP3"
    },
    "747": {
      "op": "ADD"
    },
    "748": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "750": {
      "op": "NOT"
    },
    "751": {
      "op": "SWAP1"
    },
    "752": {
      "op": "DUP2"
    },
    "753": {
      "op": "AND"
    },
    "754": {
      "op": "PUSH1",
      "value": "0x3F"
    },
    "756": {
      "op": "ADD"
    },
    "757": {
      "op": "AND"
    },
    "758": {
      "op": "DUP2"
    },
    "759": {
      "op": "ADD"
    },
    "760": {
      "op": "SWAP1"
    },
    "761": {
      "op": "DUP4"
    },
    "762": {
      "op": "DUP3"
    },
    "763": {
      "op": "GT"
    },
    "764": {
      "op": "DUP2"
    },
    "765": {
      "op": "DUP4"
    },
    "766": {
      "op": "LT"
    },
    "767": {
      "op": "OR"
    },
    "768": {
      "op": "ISZERO"
    },
    "769": {
      "op": "PUSH2",
      "value": "0x30C"
    },
    "772": {
      "op": "JUMPI"
    },
    "773": {
      "op": "PUSH2",
      "value": "0x30C"
    },
    "776": {
      "op": "PUSH2",
      "value": "0x266"
    },
    "779": {
      "jump": "i",
      "op": "JUMP"
    },
    "780": {
      "op": "JUMPDEST"
    },
    "781": {
      "op": "DUP2"
    },
    "782": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "784": {
      "op": "MSTORE"
    },
    "785": {
      "op": "DUP3"
    },
    "786": {
      "op": "DUP2"
    },
    "787": {
      "op": "MSTORE"
    },
    "788": {
      "op": "DUP10"
    },
    "789": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "791": {
      "op": "DUP5"
    },
    "792": {
      "op": "DUP8"
    },
    "793": {
      "op": "ADD"
    },
    "794": {
      "op": "ADD"
    },
    "795": {
      "op": "GT"
    },
    "796": {
      "op": "ISZERO"
    },
    "797": {
      "op": "PUSH2",
      "value": "0x325"
    },
    "800": {
      "op": "JUMPI"
    },
    "801": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "803": {
      "op": "DUP1"
    },
    "804": {
      "op": "REVERT"
    },
    "805": {
      "op": "JUMPDEST"
    },
    "806": {
      "op": "DUP3"
    },
    "807": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "809": {
      "op": "DUP7"
    },
    "810": {
      "op": "ADD"
    },
    "811": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "813": {
      "op": "DUP4"
    },
    "814": {
      "op": "ADD"
    },
    "815": {
      "op": "CALLDATACOPY"
    },
    "816": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "818": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "820": {
      "op": "DUP5"
    },
    "821": {
      "op": "DUP4"
    },
    "822": {
      "op": "ADD"
    },
    "823": {
      "op": "ADD"
    },
    "824": {
      "op": "MSTORE"
    },
    "825": {
      "op": "DUP1"
    },
    "826": {
      "op": "SWAP6"
    },
    "827": {
      "op": "POP"
    },
    "828": {
      "op": "POP"
    },
    "829": {
      "op": "POP"
    },
    "830": {
      "op": "POP"
    },
    "831": {
      "op": "POP"
    },
    "832": {
      "op": "POP"
    },
    "833": {
      "op": "SWAP3"
    },
    "834": {
      "op": "POP"
    },
    "835": {
      "op": "SWAP3"
    },
    "836": {
      "op": "POP"
    },
    "837": {
      "op": "SWAP3"
    },
    "838": {
      "jump": "o",
      "op": "JUMP"
    },
    "839": {
      "op": "JUMPDEST"
    },
    "840": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "842": {
      "op": "DUP1"
    },
    "843": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "845": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "847": {
      "op": "DUP5"
    },
    "848": {
      "op": "DUP7"
    },
    "849": {
      "op": "SUB"
    },
    "850": {
      "op": "SLT"
    },
    "851": {
      "op": "ISZERO"
    },
    "852": {
      "op": "PUSH2",
      "value": "0x35C"
    },
    "855": {
      "op": "JUMPI"
    },
    "856": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "858": {
      "op": "DUP1"
    },
    "859": {
      "op": "REVERT"
    },
    "860": {
      "op": "JUMPDEST"
    },
    "861": {
      "op": "DUP4"
    },
    "862": {
      "op": "CALLDATALOAD"
    },
    "863": {
      "op": "SWAP3"
    },
    "864": {
      "op": "POP"
    },
    "865": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "867": {
      "op": "DUP5"
    },
    "868": {
      "op": "ADD"
    },
    "869": {
      "op": "CALLDATALOAD"
    },
    "870": {
      "op": "SWAP2"
    },
    "871": {
      "op": "POP"
    },
    "872": {
      "op": "PUSH2",
      "value": "0x373"
    },
    "875": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "877": {
      "op": "DUP6"
    },
    "878": {
      "op": "ADD"
    },
    "879": {
      "op": "PUSH2",
      "value": "0x24A"
    },
    "882": {
      "jump": "i",
      "op": "JUMP"
    },
    "883": {
      "op": "JUMPDEST"
    },
    "884": {
      "op": "SWAP1"
    },
    "885": {
      "op": "POP"
    },
    "886": {
      "op": "SWAP3"
    },
    "887": {
      "op": "POP"
    },
    "888": {
      "op": "SWAP3"
    },
    "889": {
      "op": "POP"
    },
    "890": {
      "op": "SWAP3"
    },
    "891": {
      "jump": "o",
      "op": "JUMP"
    },
    "892": {
      "op": "JUMPDEST"
    },
    "893": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "895": {
      "op": "DUP1"
    },
    "896": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "898": {
      "op": "DUP4"
    },
    "899": {
      "op": "DUP6"
    },
    "900": {
      "op": "SUB"
    },
    "901": {
      "op": "SLT"
    },
    "902": {
      "op": "ISZERO"
    },
    "903": {
      "op": "PUSH2",
      "value": "0x38F"
    },
    "906": {
      "op": "JUMPI"
    },
    "907": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "909": {
      "op": "DUP1"
    },
    "910": {
      "op": "REVERT"
    },
    "911": {
      "op": "JUMPDEST"
    },
    "912": {
      "op": "POP"
    },
    "913": {
      "op": "POP"
    },
    "914": {
      "op": "DUP1"
    },
    "915": {
      "op": "MLOAD"
    },
    "916": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "918": {
      "op": "SWAP1"
    },
    "919": {
      "op": "SWAP2"
    },
    "920": {
      "op": "ADD"
    },
    "921": {
      "op": "MLOAD"
    },
    "922": {
      "op": "SWAP1"
    },
    "923": {
      "op": "SWAP3"
    },
    "924": {
      "op": "SWAP1"
    },
    "925": {
      "op": "SWAP2"
    },
    "926": {
      "op": "POP"
    },
    "927": {
      "jump": "o",
      "op": "JUMP"
    },
    "928": {
      "op": "JUMPDEST"
    },
    "929": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "931": {
      "op": "DUP3"
    },
    "932": {
      "op": "MLOAD"
    },
    "933": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "935": {
      "op": "JUMPDEST"
    },
    "936": {
      "op": "DUP2"
    },
    "937": {
      "op": "DUP2"
    },
    "938": {
      "op": "LT"
    },
    "939": {
      "op": "ISZERO"
    },
    "940": {
      "op": "PUSH2",
      "value": "0x3C1"
    },
    "943": {
      "op": "JUMPI"
    },
    "944": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "946": {
      "op": "DUP2"
    },
    "947": {
      "op": "DUP7"
    },
    "948": {
      "op": "ADD"
    },
    "949": {
      "op": "DUP2"
    },
    "950": {
      "op": "ADD"
    },
    "951": {
      "op": "MLOAD"
    },
    "952": {
      "op": "DUP6"
    },
    "953": {
      "op": "DUP4"
    },
    "954": {
      "op": "ADD"
    },
    "955": {
      "op": "MSTORE"
    },
    "956": {
      "op": "ADD"
    },
    "957": {
      "op": "PUSH2",
      "value": "0x3A7"
    },
    "960": {
      "op": "JUMP"
    },
    "961": {
      "op": "JUMPDEST"
    },
    "962": {
      "op": "DUP2"
    },
    "963": {
      "op": "DUP2"
    },
    "964": {
      "op": "GT"
    },
    "965": {
      "op": "ISZERO"
    },
    "966": {
      "op": "PUSH2",
      "value": "0x3D0"
    },
    "969": {
      "op": "JUMPI"
    },
    "970": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "972": {
      "op": "DUP3"
    },
    "973": {
      "op": "DUP6"
    },
    "974": {
      "op": "ADD"
    },
    "975": {
      "op": "MSTORE"
    },
    "976": {
      "op": "JUMPDEST"
    },
    "977": {
      "op": "POP"
    },
    "978": {
      "op": "SWAP2"
    },
    "979": {
      "op": "SWAP1"
    },
    "980": {
      "op": "SWAP2"
    },
    "981": {
      "op": "ADD"
    },
    "982": {
      "op": "SWAP3"
    },
    "983": {
      "op": "SWAP2"
    },
    "984": {
      "op": "POP"
    },
    "985": {
      "op": "POP"
    },
    "986": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "678ec239314906843bf06fb6e237320ed93283e7",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\";\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\";\n\ncontract VRFCoordinatorMock {\n  LinkTokenInterface public LINK;\n\n  event RandomnessRequest(address indexed sender, bytes32 indexed keyHash, uint256 indexed seed);\n\n  constructor(address linkAddress) public {\n    LINK = LinkTokenInterface(linkAddress);\n  }\n\n  function onTokenTransfer(\n    address sender,\n    uint256 fee,\n    bytes memory _data\n  ) public onlyLINK {\n    (bytes32 keyHash, uint256 seed) = abi.decode(_data, (bytes32, uint256));\n    emit RandomnessRequest(sender, keyHash, seed);\n  }\n\n  function callBackWithRandomness(\n    bytes32 requestId,\n    uint256 randomness,\n    address consumerContract\n  ) public {\n    VRFConsumerBase v;\n    bytes memory resp = abi.encodeWithSelector(v.rawFulfillRandomness.selector, requestId, randomness);\n    uint256 b = 206000;\n    require(gasleft() >= b, \"not enough gas for consumer\");\n    (bool success, ) = consumerContract.call(resp);\n  }\n\n  modifier onlyLINK() {\n    require(msg.sender == address(LINK), \"Must use LINK token\");\n    _;\n  }\n}",
  "sourceMap": "192:993:7:-:0;;;358:89;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;404:4;:38;;-1:-1:-1;;;;;;404:38:7;-1:-1:-1;;;;;404:38:7;;;;;;;;;;192:993;;14:290:8;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:8;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:8:o;:::-;192:993:7;;;;;;",
  "sourcePath": "contracts/test/VRFCoordinatorMock.sol",
  "type": "contract"
}